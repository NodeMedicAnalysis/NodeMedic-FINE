from .template import *

# transition: char | next_state | new_context | inner prefix within state
  # inner prefix: if a variable has to start with x, thats its inner prefix. For example:
  # completing("bla.x(3 + y") results in a last node being an identifier, with inner prefix "y", meaning that it starts with y whatever it is
  # inner prefix being None means that character should not be considered in the template if current state is one of the template-generating ones
  # inner prefix being -1, means that the start attribute must be set to the first element of the transition, and it should not be considered when generating a template

# context is None when state is supposed to pop a context
# context is -1 when there is not context to add
# otherwise, context is whatever needs to be added to the context

#WS = [' ', '\t', '\n', '\r']
#WS = [' ', '\t']
WS = [' '] # Had to do this for soundness

LETTERS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q','r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B','C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K','L', 'M','N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V','W', 'X', 'Y', 'Z']
DIGITS = ['0','1','2','3','4','5','6','7','8','9']
ALPHA = LETTERS + DIGITS
VAR_AL = ALPHA + ['_', '$']
VAR_AL_WITHOUT_DIGITS = LETTERS + ['_', '$']
BIN_OPERATORS = ['+', '-', '*', '/', '%', '&', '|', '^', '<', '>', ',']

SPECIAL_CHARACTERS = [
    '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/',
    '=', '>', '<', '^', '|', '_', '~', '[', ']', '{', '}', '(', ')', '@', ':',
    ';', '?', '\\', ']', '^', '|', '~', ' '
]
# Chars that can be in a string
ALL_CHARS = ALPHA + SPECIAL_CHARACTERS

# TODO - Provide this as a config
FUNCTION = 'function'
EVAL = 'eval'
ACE = EVAL

IDENT_GEN = ('VariableStart', 'VariableStartFirst', 'newIdentStartReally', 'deleteStmtStartIdentifier', 'ObjectIdentifierValue', 'ObjectArrayIdentifierValue', 'FunctionCallArgsStart', 'varDeclInitStart', 'ArrayIdentifierElement', 'FunctionCallArgsArrayIdentifierValue', 'FunctionCallArgsObjectIdentifierValue', 'FunctionCallArgsObjectIdentifierArrayValue')
FRESH_IDENT_GEN = ('varDeclStartIdentifier', 'FunctionName')
GET_FIELD_GEN = ('getFieldDoubleStringStart', 'getFieldStringStart', 'getFieldSpecialStringStart')
TEMPL_GENERATING = IDENT_GEN + FRESH_IDENT_GEN + GET_FIELD_GEN

FORBIDDEN_VAR_NAMES = ['return']

FunctionBodyContext = 'functionBody'
parenthesisContext = 'parenthesis'
getFieldContext = 'getField'
blockContext = 'codeblock'

def explode(msg):
    raise Exception(msg)

class Node:
    distance = 0 # Distance to Root node
    start = '' # Start of the template
    def __init__(self, context, start=''):
        '''
            context: What context to keep (are we in an expression, in a function?)
            start: What is the current concretization of the current node? (.e.g, in var abc=3, state=abc in the VariableNode)
        '''
        self.name = 'unknown'
        self.start = start
        self.transitions = []
        self.create_edges(context) # Get transitions

    def next_states(self, context, next_char):
        result = []
        for tran in self.transitions:
            assert len(tran) == 4, tran
            c, next_state, new_context, inner_prefix = tran
            if new_context == -1:
                new_context = []
            else:
                new_context = [new_context]
                
            if c == next_char:
                if new_context and new_context[0] is None:
                    new_context = context[:-1] # Pop from context
                else:
                    new_context = context + new_context

                if inner_prefix is None:
                    start = ''
                elif inner_prefix == -1:
                    start = c
                else:
                    start = inner_prefix

                new_state = next_state(new_context, start)

                result.append((new_state, new_context))
        return result
    
    def print_state(self):
        print(self.name)

    def get_template(self, context):
        all_possibilities = []

        prefix = []
        transitions = self.transitions

        # iterate over all nodes where a payload can be injected
        if isinstance(self, Root):
            return  [[Payload(), Literal(self.get_back_to_root(context)[0])]]
        elif isinstance(self, ReturnStartRETURN):
            prefix = [Payload()] 
            transitions = RootMandatory(context).transitions
        elif isinstance(self, Expression):
            return [[Payload(), Literal(Root(context).get_back_to_root(context)[0])]]
        elif self.__class__.__name__ in IDENT_GEN:
            prefix = [Identifier(self.start)]
        elif self.__class__.__name__ in FRESH_IDENT_GEN:
            prefix = [FreshIdentifier(self.start)]
        elif self.__class__.__name__ in GET_FIELD_GEN:
            prefix = [GetField(self.start)]


        for tran in transitions:
            assert len(tran) == 4
            c, next_state, new_context, inner_prefix = tran
            if new_context == -1:
                new_context = context
            else:
                if new_context is None:
                    new_context = context[:-1] # Pop from context
                else:
                    new_context = context + [new_context]


            if next_state.distance < self.distance: # Easy to prove it can not be the same state, if its not the Root
                next_state = next_state(new_context)
                if inner_prefix is None:
                    next_state.start = ''
                elif inner_prefix == -1:
                    next_state.start = ''
                    #next_state.start = c # TODO - Do we want this instead, or should we return fewer template and let SMT worry about the initial char of a variable?
                else:
                    next_state.start = inner_prefix
                val = next_state.get_template(new_context)


                if inner_prefix is None and self.__class__.__name__ in TEMPL_GENERATING:
                    c = prefix
                elif inner_prefix == -1 and next_state.__class__.__name__ in TEMPL_GENERATING:
                    c = prefix
                else:
                    c = prefix + [Literal(c)]

                all_possibilities += [c + x for x in val]

        return all_possibilities

    def get_back_to_root(self, context):
        all_possibilities = []
        for tran in self.transitions:
            assert len(tran) == 4
            c, next_state, new_context, inner_prefix = tran
            if new_context == -1:
                new_context = context
            else:
                if new_context is None:
                    new_context = context[:-1] # Pop from context
                else:
                    new_context = context + [new_context]

            if next_state.distance < self.distance:
                if inner_prefix is None:
                    start = ''
                elif inner_prefix == -1:
                    start = c
                else:
                    start = inner_prefix

                next_state = next_state(new_context, start)
                all_possibilities += [c + x for x in next_state.get_back_to_root(new_context)]
            

        return all_possibilities


class Root(Node):
    distance = 0
    ''' Root node has implicit transitions depending on context '''
    def create_edges(self, context):
        self.transitions = []
        self.context = context

        # Function declaration
        self.transitions.append(('f', FunctionStartF, -1, '')) # Named function
        self.transitions.append(('a', AsyncFunctionStartA, -1, ''))

        self.transitions.append(('(', Expression, parenthesisContext, ''))
        self.transitions.append(('(', RootMandatory, parenthesisContext, ''))

        # Literals
        self.transitions.append(('"', DoubleStringStart, -1, ''))
        self.transitions.append(('`', SpecialStringStart, -1, ''))
        self.transitions.append(("'", StringStart, -1, ''))
        
        for c in DIGITS:
            self.transitions.append((c, NumberStart, -1, c))
            self.transitions.append((c, BinOperators, -1, ''))

        self.transitions.append((';', Root, -1, ''))

        for ws in WS:
            self.transitions.append((ws, Root, -1, ''))
    
        # Variable 
        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, VariableStart, -1, -1))
        self.transitions.append(('v', varDeclStartV, -1, ''))

        #if FunctionBodyContext in context:
        # commented if because our most frequent sink is Function and therefore, returns are allowed right from the start 
        self.transitions.append(('r', ReturnStartR, -1, ''))

        self.transitions.append(('(', AnonymousFunctionStart, -1, ''))

        self.transitions.append(('n', newStmtStartN, -1, ''))
    
        self.transitions.append(('d', deleteStmtStartD, -1, ''))

        self.transitions.append(('w', withStmtStartW, -1, ''))
        
        self.transitions.append(('{', Root, blockContext, ''))

        self.transitions.append(('[', ArrayStart, -1, ''))
        self.transitions.append(('{', ObjectStart, -1, ''))


        if len(context) > 0:
            if context[-1] == FunctionBodyContext:
                self.transitions.append(('}', Root, None, ''))
            elif context[-1] == parenthesisContext:
                self.transitions.append((')', Root, None, ''))
            elif context[-1] == getFieldContext:
                self.transitions.append((']', Root, None, '')) 
            elif context[-1] == blockContext:
                self.transitions.append(('}', Root, None, ''))
            else:
                assert False, 'Unknown context1: ' + context[-1]

        self.name = 'root'

    def get_back_to_root(self, context):
        result = ''
        for el in context[::-1]:
            if el in (FunctionBodyContext, blockContext):
                result += '}' 
            elif el == parenthesisContext:
                result += ')'
            elif el == getFieldContext:
                result += ']'
            else:
                assert False, 'Unknown context2: ' + el
        return [result]

class RootMandatory(Node):
    distance = 2
    def create_edges(self, context):
        FORBIDDEN_CHARS = [ws for ws in WS]
        FORBIDDEN_CHARS.append(',')
        FORBIDDEN_CHARS.append(';')
        FORBIDDEN_STATES = [varDeclStartV, Root]

        r = Root(context, self.start)
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, RootMandatory, -1, ''))

        for tran in r.transitions:
            assert len(tran) == 4
            c = tran[0]
            next_state = tran[1]
            if c not in FORBIDDEN_CHARS and next_state not in FORBIDDEN_STATES:
                self.transitions.append(tran)

                
class withStmtStartW(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('i', withStmtStartWI, -1, ''))
        self.name = 'withStmtStartW'
          
class withStmtStartWI(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('t', withStmtStartWIT, -1, ''))
        self.name = 'withStmtStartWI'
          
class withStmtStartWIT(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('h', withStmtStartWITH, -1, ''))
        self.name = 'withStmtStartWIT'

class withStmtStartWITH(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, withStmtStartWITH, -1, ''))

        self.transitions.append(('(', FunctionWaitForParams, -1, ''))

        self.name = 'withStmtStartWITH'       

class FunctionStartF(Node):
    distance = 12
    def create_edges(self, context):
        self.transitions = [('u', FunctionStartFu, -1, '')]
        self.name = 'functionStartF'

class FunctionStartFu(Node):
    distance = 11
    def create_edges(self, context):
        self.transitions = [('n', FunctionStartFun, -1, '')]
        self.name = 'functionStartFu'

class FunctionStartFun(Node):
    distance = 10
    def create_edges(self, context):
        self.transitions = [('c', FunctionStartFunc, -1, '')]
        self.name = 'functionStartFun'

class FunctionStartFunc(Node):
    distance = 9
    def create_edges(self, context):
        self.transitions = [('t', FunctionStartFunct, -1, '')]
        self.name = 'functionStartFunc'

class FunctionStartFunct(Node):
    distance = 8
    def create_edges(self, context):
        self.transitions = [('i', FunctionStartFuncti, -1, '')]
        self.name = 'functionStartFunct'

class FunctionStartFuncti(Node):
    distance = 7
    def create_edges(self, context):
        self.transitions = [('o', FunctionStartFunctio, -1, '')]
        self.name = 'functionStartFuncti'

class FunctionStartFunctio(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = [('n', FunctionStartFunction, -1, '')]
        self.name = 'functionStartFunctio'

class FunctionStartFunction(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, FunctionWaitForName, -1, ''))
        #self.transitions.append(('(', FunctionWaitForParams)) # Anonymous function not allowed here
        self.name = 'functionStartFunction'

class FunctionWaitForName(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, FunctionWaitForName, -1, ''))
        #self.transitions.append(('(', FunctionWaitForParams)) # Anonymous function not allowed here

        for letter in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((letter, FunctionName, -1, -1)) # Named function
        self.name = 'functionWaitForName'

class FunctionName(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        for letter in VAR_AL:
            self.transitions.append((letter, FunctionName, -1, self.start + letter))
        self.transitions.append(('(', FunctionWaitForParams, -1, ''))
        self.name = 'functionName'

class FunctionWaitForParams(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, FunctionWaitForParams, -1, ''))
        self.transitions.append((')', FunctionWaitForDeclaration, -1, ''))
        for letter in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((letter, FunctionWaitForParam, -1, letter))
            self.transitions.append((letter, FunctionWaitForParamWithDefault, -1, letter)) # Parameters with default values
        self.name = 'functionParams'

class FunctionWaitForMandatoryParams(Node):
    distance = 3
    ''' Needs a param for sure '''
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, FunctionWaitForParams, -1, ''))
        for letter in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((letter, FunctionWaitForParam, -1, letter))
            self.transitions.append((letter, FunctionWaitForParamWithDefault, -1, letter)) # Parameters with default values
        self.name = 'functionParams'

class FunctionWaitForParam(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in VAR_AL:
            self.transitions.append((letter, FunctionWaitForParam, -1, self.start + letter))
        self.transitions.append((')', FunctionWaitForDeclaration, -1, ''))
        self.transitions.append((',', FunctionWaitForMandatoryParams, -1, ''))
        self.name = 'functionWaitForParam'

class FunctionWaitForParamWithDefault(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []
        for letter in VAR_AL:
            self.transitions.append((letter, FunctionWaitForParamWithDefault, -1, self.start + letter))
        self.transitions.append(('=', waitForLiteralInParamWithDefault, -1, ''))
        for ws in WS:
            self.transitions.append((ws, waitForEqualInParamWithDefault, -1, ''))
        self.name = 'functionWaitForParamWithDefault'

class waitForEqualInParamWithDefault(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, waitForEqualInParamWithDefault, -1, ''))
        self.transitions.append(('=', waitForLiteralInParamWithDefault, -1, ''))
        self.name = 'waitForEqualInParamWithDefault'

class waitForLiteralInParamWithDefault(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, waitForLiteralInParamWithDefault, -1, ''))
        self.transitions.append(('\'', waitForStringLiteralInParamWithDefault, -1, ''))
        self.transitions.append(('\"', waitForDoubleStringLiteralInParamWithDefault, -1, ''))
        for letter in LETTERS:
            self.transitions.append((letter, FunctionWaitForParam, -1, letter))
        for digit in DIGITS:
            self.transitions.append((digit, waitForNumberInParamWithDefault, -1, digit))
    
        self.name = 'waitForLiteralInParamWithDefault'

class waitForStringLiteralInParamWithDefault(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, waitForStringLiteralInParamWithDefault, -1, self.start + letter))
        self.transitions.append(('\'', endLiteralInParamWithDefault, -1, ''))
        self.name = 'waitForStringLiteralInParamWithDefault'

class waitForDoubleStringLiteralInParamWithDefault(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, waitForDoubleStringLiteralInParamWithDefault, -1, self.start + letter))
        self.transitions.append(('\"', endLiteralInParamWithDefault, -1, ''))
        self.name = 'waitForDoubleStringLiteralInParamWithDefault'

class waitForNumberInParamWithDefault(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for digit in DIGITS:
            self.transitions.append((digit, waitForNumberInParamWithDefault, -1, self.start + digit))
        self.transitions.append((')', FunctionWaitForDeclaration, -1, ''))
        self.transitions.append((',', FunctionWaitForMandatoryParams, -1, ''))
        self.name = 'waitForNumberInParamWithDefault'

class endLiteralInParamWithDefault(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, endLiteralInParamWithDefault, -1, ''))
        self.transitions.append((')', FunctionWaitForDeclaration, -1, ''))
        self.transitions.append((',', FunctionWaitForMandatoryParams, -1, ''))
        self.name = 'endLiteralInParamWithDefault'

class FunctionWaitForDeclaration(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, FunctionWaitForDeclaration, -1, ''))
        self.transitions.append(('{', Root, FunctionBodyContext, ''))
        self.name = 'functionWaitForDeclaration'

class AsyncFunctionStartA(Node):
    distance = 18
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('s', AsyncFunctionStartAS, -1, ''))
        self.name = 'asyncFunctionStartA'

class AsyncFunctionStartAS(Node):
    distance = 17
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('y', AsyncFunctionStartASY, -1, ''))
        self.name = 'asyncFunctionStartAS'
        
class AsyncFunctionStartASY(Node):
    distance = 16
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('n', AsyncFunctionStartASYN, -1, ''))
        self.name = 'asyncFunctionStartASY'

class AsyncFunctionStartASYN(Node):
    distance = 15
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('c', AsyncFunctionStartASYNC, -1, ''))
        self.name = 'asyncFunctionStartASYN'

class AsyncFunctionStartASYNC(Node):
    distance = 14
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, AsyncFunctionStartASYNCS, -1, ''))
        self.name = 'asyncFunctionStartASYNC'


class AsyncFunctionStartASYNCS(Node):
    distance = 13
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, AsyncFunctionStartASYNCS, -1, ''))
        self.name = 'AsyncFunctionStartASYNCS'

        self.transitions.append(('f', AsyncFunctionStartASYNCSF, -1, ''))

class AsyncFunctionStartASYNCSF(Node):
    distance = 12
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('u', AsyncFunctionStartASYNCSFU, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSF'

class AsyncFunctionStartASYNCSFU(Node):
    distance = 11
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('n', AsyncFunctionStartASYNCSFUN, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSFU'

class AsyncFunctionStartASYNCSFUN(Node):
    distance = 10
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('c', AsyncFunctionStartASYNCSFUNC, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSFUN'

class AsyncFunctionStartASYNCSFUNC(Node):
    distance = 9
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('t', AsyncFunctionStartASYNCSFUNCT, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSFUNC'

class AsyncFunctionStartASYNCSFUNCT(Node):
    distance = 8
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('i', AsyncFunctionStartASYNCSFUNCTI, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSFUNCT'
 
class AsyncFunctionStartASYNCSFUNCTI(Node):
    distance = 7
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('o', AsyncFunctionStartASYNCSFUNCTIO, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSFUNCTI'

class AsyncFunctionStartASYNCSFUNCTIO(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('n', AsyncFunctionStartASYNCSFUNCTION, -1, ''))
        self.name = 'AsyncFunctionStartASYNCSFUNCTIO'

class AsyncFunctionStartASYNCSFUNCTION(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((' ', AsyncFunctionStartASYNCSFUNCTIONSPACE, -1, ''))

class AsyncFunctionStartASYNCSFUNCTIONSPACE(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, AsyncFunctionStartASYNCSFUNCTIONSPACE, -1, ''))
        
        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionName, -1, -1))

        self.name = 'AsyncFunctionStartASYNCSFUNCTIONSPACE'


# TODO - Function may need more logic behind it. Identifiers too. Afterall, when the name of the function is invalid (e.g., reserved keyword like "function"), the user must keep typing or else it can not be accepted

class DoubleStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, DoubleStringStart, -1, self.start + letter))
        self.transitions.append(('"', BinOperators, -1, ''))
        self.transitions.append(('"', EndExpression, -1, ''))
        self.name = 'doubleStringStart'

class StringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, StringStart, -1, self.start + letter))
        self.transitions.append(("'", BinOperators, -1, ''))
        self.transitions.append(("'", EndExpression, -1, ''))
        self.name = 'StringStart'

class SpecialStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != '`']:
            self.transitions.append((letter, SpecialStringStart, -1, self.start + letter))
        self.transitions.append(('`', BinOperators, -1, ''))
        self.transitions.append(('`', EndExpression, -1, ''))
        self.name = 'SpecialStringStart'

class NumberStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in DIGITS:
            self.transitions.append((letter, NumberStart, -1, self.start + letter))
            self.transitions.append((letter, NeedsSeparator, -1, None))
            self.transitions.append((letter, BinOperators, -1, None))

        self.name = 'NumberStart'

class VariableStart(Node):
    distance = 2

    def create_edges(self, context):
        self.transitions = []
        for letter in VAR_AL:
            self.transitions.append((letter, VariableStart, -1, self.start + letter))

            if self.start + letter not in FORBIDDEN_VAR_NAMES:
                self.transitions.append((letter, NeedsSeparator, -1, None))

        if self.start not in FORBIDDEN_VAR_NAMES:
            #self.transitions.append(('+', PossibleOperator)) # TODO - Do operators
            self.transitions.append(('=', RootMandatory, -1, ''))

            for ws in WS:
                self.transitions.append((ws, VariableStartEqMaybe, -1, ''))

            self.transitions.append(('.', VariableStartFirst, -1, ''))
            self.transitions.append(('(', FunctionCallArgs, -1, ''))
            self.transitions.append(('[', getFieldStmt, -1, ''))
        self.name = 'VariableStart'

    def get_back_to_root(self, context):
        result = ''
        rest_context = []
        for i, el in enumerate(context[::-1]):
            if el == getFieldContext:
                result += ']' 
            else:
                rest_context = context[:len(context)-i-1]
                break
        return [result + c for c in super().get_back_to_root(rest_context)]

class VariableStartEqMaybe(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('=', Expression, -1, ''))
        for ws in WS:
            self.transitions.append((ws, VariableStartEqMaybe, -1, ''))

        # TODO - do operators 
        self.name = 'VariableStartEqMaybe'

class VariableStartFirst(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((letter, VariableStart, -1, -1))
            self.transitions.append((letter, NeedsSeparator, -1, ''))

        self.name = 'VariableStartFirst'

class NeedsSeparator(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, NeedsSeparator, -1, ''))

        if not context or (context[-1] != getFieldContext and context[-1] != parenthesisContext):
            self.transitions.append((';', Root, -1, ''))
            self.transitions.append((',', RootMandatory, -1, ''))

class ReturnStartR(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('e', ReturnStartRE, -1, ''))
        self.name = 'returnStartR'

class ReturnStartRE(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('t', ReturnStartRET, -1, ''))
        self.name = 'returnStartRE'

class ReturnStartRET(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('u', ReturnStartRETU, -1, ''))
        self.name = 'returnStartRET'

class ReturnStartRETU(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('r', ReturnStartRETUR, -1, ''))
        self.name = 'returnStartRETU'

class ReturnStartRETUR(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('n', ReturnStartRETURN, -1, ''))
        self.name = 'returnStartRETUR'

class ReturnStartRETURN(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, Expression, -1, ''))

        self.transitions.append((';', Root, -1, ''))

        self.transitions.append(('(', Expression, parenthesisContext, ''))
        self.name = 'returnStartRETURN'

class AnonymousFunctionStart(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        
        for ws in WS:
            self.transitions.append((ws, AnonymousFunctionStart, -1, ''))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, AnonymousFunctionArgs, -1, c))

        self.transitions.append((')', AnonymousFunctionStartEq, -1, ''))
        
        self.name = 'anonymousFunctionStart'

class AnonymousFunctionArgs(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', Root, -1, ''))
        
        for ws in WS:
            self.transitions.append((ws, AnonymousFunctionArgsEndMaybe, -1, ''))

        for c in VAR_AL:
            self.transitions.append((c, AnonymousFunctionArgs, -1, self.start + c))

        self.transitions.append((',', AnonymousFunctionStartMandatory, -1, ''))
        self.transitions.append((')', AnonymousFunctionStartEq, -1, ''))
        self.name = 'AnonymousFunctionArgs'


class AnonymousFunctionStartMandatory(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', Root, -1, ''))
        
        for ws in WS:
            self.transitions.append((ws, AnonymousFunctionStart, -1, ''))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, AnonymousFunctionArgs, -1, c))

        self.transitions.append((')', AnonymousFunctionStartEq, -1, ''))
        
        self.name = 'AnonymousFunctionStartMandatory'

class AnonymousFunctionArgsEndMaybe(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', Root, -1, ''))
        
        for ws in WS:
            self.transitions.append((ws, AnonymousFunctionArgsEndMaybe, -1, ''))


        self.transitions.append((',', AnonymousFunctionStartMandatory, -1, ''))
        self.transitions.append((')', AnonymousFunctionStartEq, -1, ''))
        self.name = 'AnonymousFunctionArgsEndMaybe'

class AnonymousFunctionStartEq(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, AnonymousFunctionStartEq, -1, ''))
        self.transitions.append(('=', AnonymousFunctionStartEqLarger, -1, ''))
        self.name = 'AnonymousFunctionStartEq'

class AnonymousFunctionStartEqLarger(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append(('>', RootMandatory, -1, ''))
        self.name = 'AnonymousFunctionStartEqLarger'

class varDeclStartV(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('a', varDeclStartVa, -1, ''))

        self.name = 'varDeclStartV'


class varDeclStartVa(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('r', varDeclStartVar, -1, ''))

        self.name = 'varDeclStartVa'

class varDeclStartVar(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, varDeclStartVarS, -1, ''))

        

        self.name = 'varDeclStartVar'

class varDeclStartVarS(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, varDeclStartVarS, -1, ''))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, varDeclStartIdentifier, -1, -1))
        
        self.name = 'varDeclStartVarS'

class varDeclStartIdentifier(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, varDeclStartIdentifier, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, varDeclEqMaybe, -1, ''))

        self.transitions.append(('=', varDeclInit, -1, '')) # Over-approximation here
        self.transitions.append((';', Root, -1, '')) # Over-approximation here
        self.transitions.append((',', varDeclStartIdentifierMandatory, -1, ''))

        self.name = 'varDeclStartIdentifier'

class varDeclInit(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, varDeclInit, -1, ''))

        # TODO - All types here
        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, varDeclInitStart, -1, -1))

        for c in DIGITS:
            self.transitions.append((c, varDeclInitStartDigit, -1, c))

        self.transitions.append(('"', DoubleStringStart, -1, '')) # Over-approximation
        self.transitions.append(("'", StringStart, -1, '')) # Over-approximation
        self.transitions.append((('`', SpecialStringStart, -1, '')))

        self.transitions.append(('[', ArrayStart, -1, '')) # Over-approximation
        self.transitions.append(('{', ObjectStart, -1, '')) # Over-approximation

        self.name = 'varDeclInit'

class varDeclInitStartDigit(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, varDeclInitStartDigit, -1, self.start + c))

        self.transitions.append((';', Root, -1, '')) # Over-approximation here
        for ws in WS:
            self.transitions.append((ws, Root, -1, ''))
        self.transitions.append((',', varDeclStartIdentifierMandatory, -1, ''))

        self.name = 'varDeclInitStartDigit'

class varDeclInitStart(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, varDeclInitStart, -1, self.start + c))

        self.transitions.append((';', Root, -1, '')) # Over-approximation here
        self.transitions.append((' ', Root, -1, '')) # Over-approximation here
        self.transitions.append((',', varDeclStartIdentifierMandatory, -1, ''))

        self.name = 'varDeclInitStart'

class varDeclStartIdentifierMandatory(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, varDeclStartIdentifier, -1, -1))

        for ws in WS:
            self.transitions.append((ws, varDeclStartIdentifierMandatory, -1, ''))

        self.name = 'varDeclStartIdentifierMandatory'

class varDeclEqMaybe(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, varDeclEqMaybe, -1, ''))

        self.transitions.append(('=', varDeclInit, -1, '')) # Over-approximation here
        self.transitions.append((';', Root, -1, ''))
        self.transitions.append((',', varDeclStartIdentifierMandatory, -1, ''))

        self.name = 'varDeclEqMaybe'

class FunctionCallArgs(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', BinOperators, -1, ''))
        
        for ws in WS:
            self.transitions.append((ws, FunctionCallArgs, -1, ''))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsStart, -1, -1))

        self.transitions.append(('"', FunctionCallArgsDoubleStringStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsStringStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsSpecialStringStart, -1, ''))

        self.transitions.append(('[', FunctionCallArgsArrayStart, -1, ''))
        self.transitions.append(('{', FunctionCallArgsObjectStart, -1, ''))
        self.name = 'FunctionCallArgs'


class FunctionCallArgsDoubleStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, FunctionCallArgsDoubleStringStart, -1, self.start + letter))
        self.transitions.append(('"', FunctionCallArgsLiteralEnd, -1, ''))
        self.name = 'FunctionCallArgsDoubleStringStart'

class FunctionCallArgsStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, FunctionCallArgsStringStart, -1, self.start + letter))
        self.transitions.append(("'", FunctionCallArgsLiteralEnd, -1, ''))
        self.name = 'FunctionCallArgsStringStart'

class FunctionCallArgsSpecialStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for letter in [c for c in ALL_CHARS if c != '`']:
            self.transitions.append((letter, FunctionCallArgsSpecialStringStart, -1, self.start + letter))
        self.transitions.append(('`', FunctionCallArgsLiteralEnd, -1, ''))
        self.name = 'FunctionCallArgsSpecialStringStart'

class FunctionCallArgsLiteralEnd(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', Root, -1, ''))
        self.transitions.append((',', FunctionCallArgsStartMandatory, -1, ''))
        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsLiteralEnd, -1, ''))
        self.name = 'FunctionCallArgsLiteralEnd'

class FunctionCallArgsStart(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', Root, -1, ''))
        
        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsEndMaybe, -1, ''))

        for c in VAR_AL:
            self.transitions.append((c, FunctionCallArgsStart, -1, self.start + c))

        self.transitions.append((',', FunctionCallArgsStartMandatory, -1, ''))

        self.name = 'FunctionCallArgsStart'

class FunctionCallArgsStartMandatory(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsStartMandatory, -1, ''))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsStart, -1, -1))

        self.transitions.append(('"', FunctionCallArgsDoubleStringStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsStringStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsSpecialStringStart, -1, ''))

        self.transitions.append(('[', FunctionCallArgsArrayStart, -1, ''))
        self.transitions.append(('{', FunctionCallArgsObjectStart, -1, ''))

        self.name = 'FunctionCallArgsStartMandatory'

class FunctionCallArgsEndMaybe(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        self.transitions.append((')', Root, -1, ''))
        
        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsEndMaybe, -1, ''))

        self.transitions.append((',', FunctionCallArgsStartMandatory, -1, ''))

        self.name = 'FunctionCallArgsEndMaybe'

class newStmtStartN(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('e', newStmtStartNe, -1, ''))

        self.name = 'newStmtStartN'

class newStmtStartNe(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('w', newStmtStartNew, -1, ''))

        self.name = 'newStmtStartNe'

class newStmtStartNew(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, newIdentStart, -1, ''))

        self.transitions.append(('(', newIdentStart, parenthesisContext, ''))

        self.name = 'newStmtStartNew'

class newIdentStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, newIdentStartReally, -1, -1))

        for ws in WS:
            self.transitions.append((ws, newIdentStart, -1, ''))

        self.transitions.append(('(', newIdentStart, parenthesisContext, ''))

        self.name = 'newIdentStart'

class newIdentStartReally(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, newIdentStartReally, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, Root, -1, ''))

        if not context or context[0] != parenthesisContext:
            self.transitions.append((';', Root, -1, ''))
        
        self.transitions.append(('(', FunctionCallArgs, -1, ''))

        self.name = 'newIdentStartReally'

class deleteStmtStartD(Node):
    distance = 9
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('e', deleteStmtStartDe, -1, ''))

        self.name = 'deleteStmtStartD'

class deleteStmtStartDe(Node):
    distance = 8
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('l', deleteStmtStartDel, -1, ''))

        self.name = 'deleteStmtStartDe'

class deleteStmtStartDel(Node):
    distance = 7
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('e', deleteStmtStartDele, -1, ''))

        self.name = 'deleteStmtStartDel'

class deleteStmtStartDele(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('t', deleteStmtStartDelet, -1, ''))

        self.name = 'deleteStmtStartDele'

class deleteStmtStartDelet(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('e', deleteStmtStartDelete, -1, ''))

        self.name = 'deleteStmtStartDelet'

class deleteStmtStartDelete(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, deleteStmtStartIdentifier, -1, ''))

        self.name = 'deleteStmtStartDelete'

class deleteStmtStartIdentifier(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []
        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, VariableStart, -1, -1))

        for ws in WS:
            self.transitions.append((ws, deleteStmtStartIdentifier, -1, ''))

        self.name = 'deleteStmtStartIdentifier'

class getFieldStmt(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, getFieldStmt, -1, ''))
        
        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, VariableStart, getFieldContext, -1))

        for c in DIGITS:
            self.transitions.append((c,  getFieldDigits, -1, c))

        self.transitions.append(('"', getFieldDoubleStringStart, -1, ''))
        self.transitions.append(("'", getFieldStringStart, -1, ''))
        self.transitions.append(("`", getFieldSpecialStringStart, -1, ''))

        self.name = 'getFieldStmt'

class getFieldDigits(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, getFieldDigits, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, getFieldLiteralEnd, -1, ''))

        self.name = 'getFieldDigits'

class getFieldLiteralEnd(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, getFieldLiteralEnd, -1, ''))

        self.transitions.append((']', Root, -1, ''))

        self.name = 'getFieldLiteralEnd'

class getFieldDoubleStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, getFieldDoubleStringStart, -1, self.start + letter))


        self.transitions.append(('"', getFieldLiteralEnd, -1, ''))

        self.name = 'getFieldDoubleStringStart'

class getFieldStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, getFieldStringStart, -1, self.start + letter))

        self.transitions.append(("'", getFieldLiteralEnd, -1, ''))

        self.name = 'getFieldStringStart'

class getFieldSpecialStringStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, getFieldSpecialStringStart, -1, self.start + letter))

        self.transitions.append(("`", getFieldLiteralEnd, -1, ''))

        self.name = 'getFieldSpecialStringStart'

class ArrayStart(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ArrayStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ArrayDigitsElement, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ArrayIdentifierElement, -1, -1))

        self.transitions.append(('"', ArrayDoubleStringElementStart, -1, ''))
        self.transitions.append(("'", ArrayStringElementStart, -1, ''))
        self.transitions.append(("`", ArraySpecialStringElementStart, -1, ''))

        self.transitions.append((']', NeedsSeparator, -1, ''))

        self.name = 'ArrayStart'

class ArrayDigitsElement(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, ArrayDigitsElement, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, ArrayElementEnd, -1, ''))

        self.transitions.append((']', Root, -1, ''))
        self.transitions.append((',', ArrayElementMandatory, -1, ''))

        self.name = 'ArrayDigitsElement'

class ArrayElementEnd(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ArrayElementEnd, -1, ''))

        self.transitions.append((']', Root, -1, ''))
        self.transitions.append((',', ArrayElementMandatory, -1, ''))

        self.name = 'ArrayElementEnd'


class ArrayElementMandatory(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ArrayElementMandatory, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ArrayDigitsElement, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ArrayIdentifierElement, -1, -1))

        self.transitions.append(('"', ArrayDoubleStringElementStart, -1, ''))
        self.transitions.append(("'", ArrayStringElementStart, -1, ''))
        self.transitions.append(("`", ArraySpecialStringElementStart, -1, ''))

        self.name = 'ArrayElementMandatory'

class ArrayIdentifierElement(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, ArrayIdentifierElement, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, ArrayElementEnd, -1, ''))

        self.transitions.append((']', Root, -1, ''))
        self.transitions.append((',', ArrayElementMandatory, -1, ''))

        self.name = 'ArrayIdentifierElement'

class ArrayDoubleStringElementStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, ArrayDoubleStringElementStart, -1, self.start + letter))

        self.transitions.append(('"', ArrayElementEnd, -1, ''))

        self.name = 'ArrayDoubleStringElementStart'

class ArrayStringElementStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, ArrayStringElementStart, -1, self.start + letter))

        self.transitions.append(("'", ArrayElementEnd, -1, ''))

        self.name = 'ArrayStringElementStart'

class ArraySpecialStringElementStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, ArraySpecialStringElementStart, -1, self.start + letter))

        self.transitions.append(("`", ArrayElementEnd, -1, ''))

        self.name = 'ArraySpecialStringElementStart'



class ObjectStart(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ObjectDigitsKey, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ObjectIdentifierKey, -1, c))

        self.transitions.append(('"', ObjectDoubleStringKeyStart, -1, ''))
        self.transitions.append(("'", ObjectStringKeyStart, -1, ''))
        self.transitions.append(("`", ObjectSpecialStringKeyStart, -1, ''))

        self.transitions.append(('}', NeedsSeparator, -1, ''))

        self.name = 'ObjectStart'

class ObjectDigitsKey(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, ObjectDigitsKey, -1, self.start + c))
            self.transitions.append((c, ObjectKeyEnd, -1, None))

        for ws in WS:
            self.transitions.append((ws, ObjectKeyEnd, -1, ''))

        self.name = 'ObjectDigitsKey'

class ObjectKeyEnd(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectKeyEnd, -1, ''))

        self.transitions.append((':', ObjectValueStart, -1, ''))

        self.name = 'ObjectKeyEnd'


class ObjectKeyMandatory(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectKeyMandatory, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ObjectDigitsKey, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ObjectIdentifierKey, -1, c))

        self.transitions.append(('"', ObjectDoubleStringKeyStart, -1, ''))
        self.transitions.append(("'", ObjectStringKeyStart, -1, ''))
        self.transitions.append(("`", ObjectSpecialStringKeyStart, -1, ''))

        self.name = 'ObjectKeyMandatory'

class ObjectIdentifierKey(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, ObjectIdentifierKey, -1, self.start + c))
            self.transitions.append((c, ObjectKeyEnd, -1, None))

        for ws in WS:
            self.transitions.append((ws, ObjectKeyEnd, -1, ''))


        self.name = 'ObjectIdentifierKey'

class ObjectDoubleStringKeyStart(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, ObjectDoubleStringKeyStart, -1, self.start + letter))

        self.transitions.append(('"', ObjectKeyEnd, -1, ''))

        self.name = 'ObjectDoubleStringKeyStart'

class ObjectStringKeyStart(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, ObjectStringKeyStart, -1, self.start + letter))

        self.transitions.append(("'", ObjectKeyEnd, -1, ''))

        self.name = 'ObjectStringKeyStart'

class ObjectSpecialStringKeyStart(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, ObjectSpecialStringKeyStart, -1, self.start + letter))

        self.transitions.append(("`", ObjectKeyEnd, -1, ''))

        self.name = 'ObjectSpecialStringKeyStart'

class ObjectValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectValueStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ObjectDigitsValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ObjectIdentifierValue, -1, -1))

        self.transitions.append(('"', ObjectDoubleStringValueStart, -1, ''))
        self.transitions.append(("'", ObjectStringValueStart, -1, ''))
        self.transitions.append(("`", ObjectSpecialStringValueStart, -1, ''))

        self.transitions.append(('[', ObjectArrayValueStart, -1, ''))
        #self.transitions.append(('{', ObjectObjectValueStart)) # No recursive objects

        self.name = 'ObjectValueStart'

class ObjectDigitsValue(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, ObjectDigitsValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, ObjectValueEnd, -1, ''))

        self.transitions.append((',', ObjectKeyMandatory, -1, ''))

        self.name = 'ObjectDigitsValue'

class ObjectIdentifierValue(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, ObjectIdentifierValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, ObjectValueEnd, -1, ''))

        self.transitions.append((',', ObjectKeyMandatory, -1, ''))

        self.name = 'ObjectIdentifierValue'

class ObjectDoubleStringValueStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, ObjectDoubleStringValueStart, -1, self.start + letter))

        self.transitions.append(('"', ObjectValueEnd, -1, ''))

        self.name = 'ObjectDoubleStringValueStart'

class ObjectStringValueStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, ObjectStringValueStart, -1, self.start + letter))

        self.transitions.append(("'", ObjectValueEnd, -1, ''))

        self.name = 'ObjectStringValueStart'

class ObjectSpecialStringValueStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, ObjectSpecialStringValueStart, -1, self.start + letter))

        self.transitions.append(("`", ObjectValueEnd, -1, ''))

        self.name = 'ObjectSpecialStringValueStart'

class ObjectValueEnd(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectValueEnd, -1, ''))

        self.transitions.append((',', ObjectKeyMandatory, -1, ''))
        self.transitions.append(('}', Root, -1, ''))

        self.name = 'ObjectValueEnd'

class ObjectArrayValueStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectArrayValueStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ObjectArrayDigitsValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ObjectArrayIdentifierValue, -1, -1))

        self.transitions.append(('"', ObjectArrayDoubleStringValueStart, -1, ''))
        self.transitions.append(("'", ObjectArrayStringValueStart, -1, ''))
        self.transitions.append(("`", ObjectArraySpecialStringValueStart, -1, ''))

        self.transitions.append((']', ObjectValueEnd, -1, ''))

        self.name = 'ObjectArrayValueStart'

class ObjectArrayDigitsValue(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, ObjectArrayDigitsValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, ObjectArrayValueEnd, -1, ''))

        self.transitions.append((',', ObjectArrayValueStartMandatory, -1, ''))

        self.name = 'ObjectArrayDigitsValue'

class ObjectArrayIdentifierValue(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, ObjectArrayIdentifierValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, ObjectArrayValueEnd, -1, ''))

        self.transitions.append((',', ObjectArrayValueStartMandatory, -1, ''))

        self.name = 'ObjectArrayIdentifierValue'

class ObjectArrayDoubleStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, ObjectArrayDoubleStringValueStart, -1, self.start + letter))

        self.transitions.append(('"', ObjectArrayValueEnd, -1, ''))

        self.name = 'ObjectArrayDoubleStringValueStart'

class ObjectArrayStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, ObjectArrayStringValueStart, -1, self.start + letter))

        self.transitions.append(("'", ObjectArrayValueEnd, -1, ''))

        self.name = 'ObjectArrayStringValueStart'

class ObjectArraySpecialStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, ObjectArraySpecialStringValueStart, -1, self.start + letter))

        self.transitions.append(("`", ObjectArrayValueEnd, -1, ''))

        self.name = 'ObjectArraySpecialStringValueStart'

class ObjectArrayValueEnd(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectArrayValueEnd, -1, ''))

        self.transitions.append((',', ObjectArrayValueStartMandatory, -1, ''))
        self.transitions.append((']', ObjectValueEnd, -1, ''))

        self.name = 'ObjectArrayValueEnd'

class ObjectArrayValueStartMandatory(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, ObjectArrayValueStartMandatory, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, ObjectArrayDigitsValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, ObjectArrayIdentifierValue, -1, -1))

        self.transitions.append(('"', ObjectArrayDoubleStringValueStart, -1, ''))
        self.transitions.append(("'", ObjectArrayStringValueStart, -1, ''))
        self.transitions.append(("`", ObjectArraySpecialStringValueStart, -1, ''))

        self.name = 'ObjectArrayValueStartMandatory'

class FunctionCallArgsArrayStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsArrayStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsArrayDigitsValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsArrayIdentifierValue, -1, -1))

        self.transitions.append(('"', FunctionCallArgsArrayDoubleStringValueStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsArrayStringValueStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsArraySpecialStringValueStart, -1, ''))

        self.transitions.append((']', FunctionCallArgsEndMaybe, -1, ''))

        self.name = 'FunctionCallArgsArrayStart'

class FunctionCallArgsArrayDigitsValue(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsArrayDigitsValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsArrayValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsArrayValueStartMandatory, -1, ''))

        self.name = 'FunctionCallArgsArrayDigitsValue'

class FunctionCallArgsArrayIdentifierValue(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, FunctionCallArgsArrayIdentifierValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsArrayValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsArrayValueStartMandatory, -1, ''))

        self.name = 'FunctionCallArgsArrayIdentifierValue'

class FunctionCallArgsArrayDoubleStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, FunctionCallArgsArrayDoubleStringValueStart, -1, self.start + letter))

        self.transitions.append(('"', FunctionCallArgsArrayValueEnd, -1, ''))

        self.name = 'FunctionCallArgsArrayDoubleStringValueStart'

class FunctionCallArgsArrayStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, FunctionCallArgsArrayStringValueStart, -1, self.start + letter))

        self.transitions.append(("'", FunctionCallArgsArrayValueEnd, -1, ''))

        self.name = 'FunctionCallArgsArrayStringValueStart'

class FunctionCallArgsArraySpecialStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, FunctionCallArgsArraySpecialStringValueStart, -1, self.start + letter))

        self.transitions.append(("`", FunctionCallArgsArrayValueEnd, -1, ''))

        self.name = 'FunctionCallArgsArraySpecialStringValueStart'

class FunctionCallArgsArrayValueEnd(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsArrayValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsArrayValueStartMandatory, -1, ''))
        self.transitions.append((']', FunctionCallArgsEndMaybe, -1, ''))

        self.name = 'FunctionCallArgsArrayValueEnd'

class FunctionCallArgsArrayValueStartMandatory(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsArrayValueStartMandatory, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsArrayDigitsValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsArrayIdentifierValue, -1, -1))

        self.transitions.append(('"', FunctionCallArgsArrayDoubleStringValueStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsArrayStringValueStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsArraySpecialStringValueStart, -1, ''))

        self.name = 'FunctionCallArgsArrayValueStartMandatory'

class FunctionCallArgsObjectStart(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsKey, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierKey, -1, c))

        self.transitions.append(('"', FunctionCallArgsObjectDoubleStringKeyStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsObjectStringKeyStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsObjectSpecialStringKeyStart, -1, ''))

        self.transitions.append(('}', FunctionCallArgsEndMaybe, -1, ''))

        self.name = 'FunctionCallArgsObjectStart'

class FunctionCallArgsObjectDigitsKey(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsKey, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectKeyEnd, -1, ''))

        self.transitions.append((':', FunctionCallArgsObjectValueStart, -1, ''))

        self.name = 'FunctionCallArgsObjectDigitsKey'

class FunctionCallArgsObjectIdentifierKey(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierKey, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectKeyEnd, -1, ''))

        self.transitions.append((':', FunctionCallArgsObjectValueStart, -1, ''))

        self.name = 'FunctionCallArgsObjectIdentifierKey'

class FunctionCallArgsObjectDoubleStringKeyStart(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, FunctionCallArgsObjectDoubleStringKeyStart, -1, self.start + letter))

        self.transitions.append(('"', FunctionCallArgsObjectKeyEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectDoubleStringKeyStart'

class FunctionCallArgsObjectStringKeyStart(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, FunctionCallArgsObjectStringKeyStart, -1, self.start + letter))

        self.transitions.append(("'", FunctionCallArgsObjectKeyEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectStringKeyStart'

class FunctionCallArgsObjectSpecialStringKeyStart(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, FunctionCallArgsObjectSpecialStringKeyStart, -1, self.start + letter))

        self.transitions.append(("`", FunctionCallArgsObjectKeyEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectSpecialStringKeyStart'

class FunctionCallArgsObjectKeyEnd(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectKeyEnd, -1, ''))

        self.transitions.append((':', FunctionCallArgsObjectValueStart, -1, ''))

        self.name = 'FunctionCallArgsObjectKeyEnd'

class FunctionCallArgsObjectValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectValueStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierValue, -1, -1))

        self.transitions.append(('"', FunctionCallArgsObjectDoubleStringValueStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsObjectStringValueStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsObjectSpecialStringValueStart, -1, ''))

        self.transitions.append(('[', FunctionCallArgsObjectArrayStart, -1, ''))

        self.name = 'FunctionCallArgsObjectValueStart'

class FunctionCallArgsObjectDigitsValue(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsObjectStartMandatory, -1, ''))
        self.transitions.append(('}', FunctionCallArgsEndMaybe, -1, ''))

        self.name = 'FunctionCallArgsObjectDigitsValue'

class FunctionCallArgsObjectIdentifierValue(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsObjectStartMandatory, -1, ''))
        self.transitions.append(('}', FunctionCallArgsEndMaybe, -1, ''))

        self.name = 'FunctionCallArgsObjectIdentifierValue'

class FunctionCallArgsObjectDoubleStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, FunctionCallArgsObjectDoubleStringValueStart, -1, self.start + letter))

        self.transitions.append(('"', FunctionCallArgsObjectValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectDoubleStringValueStart'

class FunctionCallArgsObjectStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, FunctionCallArgsObjectStringValueStart, -1, self.start + letter))

        self.transitions.append(("'", FunctionCallArgsObjectValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectStringValueStart'

class FunctionCallArgsObjectSpecialStringValueStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, FunctionCallArgsObjectSpecialStringValueStart, -1, self.start + letter))

        self.transitions.append(("`", FunctionCallArgsObjectValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectSpecialStringValueStart'

class FunctionCallArgsObjectValueEnd(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsObjectStartMandatory, -1, ''))
        self.transitions.append(('}', FunctionCallArgsEndMaybe, -1, ''))

        self.name = 'FunctionCallArgsObjectValueEnd'

class FunctionCallArgsObjectStartMandatory(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectStartMandatory, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsKey, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierKey, -1, c))

        self.transitions.append(('"', FunctionCallArgsObjectDoubleStringKeyStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsObjectStringKeyStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsObjectSpecialStringKeyStart, -1, ''))

        self.name = 'FunctionCallArgsObjectStartMandatory'

class FunctionCallArgsObjectArrayStart(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectArrayStart, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsArrayValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierArrayValue, -1, -1))

        self.transitions.append(('"', FunctionCallArgsObjectDoubleStringArrayValueStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsObjectStringArrayValueStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsObjectSpecialStringArrayValueStart, -1, ''))

        self.transitions.append((']', FunctionCallArgsObjectValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectArrayStart'

class FunctionCallArgsObjectDigitsArrayValue(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsArrayValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectArrayValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsObjectArrayStart, -1, ''))

        self.name = 'FunctionCallArgsObjectDigitsArrayValue'

class FunctionCallArgsObjectIdentifierArrayValue(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for c in VAR_AL:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierArrayValue, -1, self.start + c))

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectArrayValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsObjectArrayStartMandatory, -1, ''))

        self.name = 'FunctionCallArgsObjectIdentifierArrayValue'

class FunctionCallArgsObjectDoubleStringArrayValueStart(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != '"']:
            self.transitions.append((letter, FunctionCallArgsObjectDoubleStringArrayValueStart, -1, self.start + letter))

        self.transitions.append(('"', FunctionCallArgsObjectArrayValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectDoubleStringArrayValueStart'

class FunctionCallArgsObjectStringArrayValueStart(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "'"]:
            self.transitions.append((letter, FunctionCallArgsObjectStringArrayValueStart, -1, self.start + letter))

        self.transitions.append(("'", FunctionCallArgsObjectArrayValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectStringArrayValueStart'

class FunctionCallArgsObjectSpecialStringArrayValueStart(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        for letter in [c for c in ALL_CHARS if c != "`"]:
            self.transitions.append((letter, FunctionCallArgsObjectSpecialStringArrayValueStart, -1, self.start + letter))

        self.transitions.append(("`", FunctionCallArgsObjectArrayValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectSpecialStringArrayValueStart'

class FunctionCallArgsObjectArrayValueEnd(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectArrayValueEnd, -1, ''))

        self.transitions.append((',', FunctionCallArgsObjectArrayStartMandatory, -1, ''))
        self.transitions.append((']', FunctionCallArgsObjectValueEnd, -1, ''))

        self.name = 'FunctionCallArgsObjectArrayValueEnd'

class FunctionCallArgsObjectArrayStartMandatory(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, FunctionCallArgsObjectArrayStartMandatory, -1, ''))

        for c in DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectDigitsArrayValue, -1, c))

        for c in VAR_AL_WITHOUT_DIGITS:
            self.transitions.append((c, FunctionCallArgsObjectIdentifierArrayValue, -1, -1))

        self.transitions.append(('"', FunctionCallArgsObjectDoubleStringArrayValueStart, -1, ''))
        self.transitions.append(("'", FunctionCallArgsObjectStringArrayValueStart, -1, ''))
        self.transitions.append(("`", FunctionCallArgsObjectSpecialStringArrayValueStart, -1, ''))

        self.name = 'FunctionCallArgsObjectArrayStartMandatory'

class BinOperators(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, BinOperators, -1, ''))

        for c in BIN_OPERATORS:
            self.transitions.append((c, RootMandatory, -1, c))

        if not context or context[-1] != parenthesisContext:
            self.transitions.append((';', Root, -1, ''))

        self.name = 'Operator'

class EndExpression(Node):
    distance = 1
    def create_edges(self, context):
        self.transitions = []
        for ws in WS:
            self.transitions.append((ws, EndExpression, -1, ''))

        if not context or context[-1] != parenthesisContext:
            self.transitions.append((';', Root, -1, ''))

        self.name = 'EndExpression'

class Expression(Node):
    distance = 2
    def create_edges(self, context):
        self.transitions = []

        FORBIDDEN_CHARS = [ws for ws in WS]
        FORBIDDEN_CHARS.append(',')
        FORBIDDEN_CHARS.append(';')
        FORBIDDEN_CHARS.append(')')
        FORBIDDEN_CHARS.append(']')
        FORBIDDEN_STATES = [varDeclStartV, Root]

        for ws in WS:
            self.transitions.append((ws, Expression, -1, ''))

        r = Root(context)
        for tran in r.transitions:
            assert len(tran) == 4
            c = tran[0]
            next_node = tran[1]

            if c not in FORBIDDEN_CHARS and next_node not in FORBIDDEN_STATES:
                self.transitions.append(tran)

        self.transitions.append(('f', UnnamedFunctionStartF, -1, ''))

        self.name = 'Expression'

class UnnamedFunctionStartF(Node):
    distance = 10
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('u', UnnamedFunctionStartFU, -1, ''))

        self.name = 'UnnamedFunctionStartF'

class UnnamedFunctionStartFU(Node):
    distance = 9
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('n', UnnamedFunctionStartFUN, -1, ''))

        self.name = 'UnnamedFunctionStartFU'

class UnnamedFunctionStartFUN(Node):
    distance = 8
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('c', UnnamedFunctionStartFUNC, -1, ''))

        self.name = 'UnnamedFunctionStartFUN'

class UnnamedFunctionStartFUNC(Node):
    distance = 7
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('t', UnnamedFunctionStartFUNCT, -1, ''))

        self.name = 'UnnamedFunctionStartFUNC'

class UnnamedFunctionStartFUNCT(Node):
    distance = 6
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('i', UnnamedFunctionStartFUNCTI, -1, ''))

        self.name = 'UnnamedFunctionStartFUNCT'

class UnnamedFunctionStartFUNCTI(Node):
    distance = 5
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('o', UnnamedFunctionStartFUNCTIO, -1, ''))

        self.name = 'UnnamedFunctionStartFUNCTI'

class UnnamedFunctionStartFUNCTIO(Node):
    distance = 4
    def create_edges(self, context):
        self.transitions = []

        self.transitions.append(('n', UnnamedFunctionStartFUNCTION, -1, ''))

        self.name = 'UnnamedFunctionStartFUNCTIO'

class UnnamedFunctionStartFUNCTION(Node):
    distance = 3
    def create_edges(self, context):
        self.transitions = []

        for ws in WS:
            self.transitions.append((ws, UnnamedFunctionStartFUNCTION, -1, ''))

        self.transitions.append(('(', FunctionWaitForParams, -1, ''))

        self.name = 'UnnamedFunctionStartFUNCTION'
