class Literal:
    def __init__(self, literal):
        ''' A constant string that can not be controlled by the attacker '''
        self.value = literal
    def __repr__(self):
        return '<literal: ' + repr(self.value) + '>'

class Identifier:
    def __init__(self, prefix):
        '''
            prefix...
            a.prefix...
        '''
        self.value = prefix

    def __repr__(self):
        if self.value:
            suffix = ': ' + repr(self.value + f'... ') 
        else:
            suffix = ''
        return f'<identifier{suffix}>'

class FreshIdentifier:
    def __init__(self, prefix):
        ''' var prefix...
            function prefix...
        '''
        self.value = prefix

    def __repr__(self):
        if self.value:
            suffix = ': ' + repr(self.value + f'... ') 
        else:
            suffix = ''
        return f'<fresh identifier{suffix}>'

class GetField:
    def __init__(self, prefix):
        ''' a["prefix...
            a['prefix...
            a[`prefix...
            In accesses of properties like a.b , b will be represented as an identifier
            '''
        self.value = prefix

    def __repr__(self):
        if self.value:
            suffix = ': ' + repr(self.value + f'... ') 
        else:
            suffix = ''
        return f'<get field{suffix}>'

class Payload:
    value = '<payload>'
    def __init__(self):
        '''
         A place where we can insert our payload
        '''
        pass
    
    def __repr__(self):
        return f'<payload>'
    
def concretize_template(template):
    concrete = ''
    for el in template:
        concrete += el.value + 'a'
    return concrete

def print_template(template):
    concrete = ''
    for el in template:
        concrete += str(el)
    return concrete